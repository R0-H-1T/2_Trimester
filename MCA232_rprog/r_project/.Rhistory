data <- read.csv(path)
str(data)
data <- read.csv("D:\christUNI\MCA_sem1\dev1\r_prog\UScereal.csv")
data <- read.csv("D:/christUNI/MCA_sem1/dev1/r_prog/UScereal.csv")
data <- read.csv("UScereal.csv")
library(GGally)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(vcd)
library(reshape2)
library(fmsb)
library(gridExtra)
data <- read.csv("UScereal.csv")
data <- read.csv("./rproject/UScereal.csv")
us_cereal <- read.csv("./UScereal1.csv")
str(us_cereal)
str(us_cereal)
View(us_cereal)
dim(us_cereal)
us_cereal <- na.omit(us_cereal)
str(us_cereal)
summary (us_cereal)
hist (
us_cereal$Name,
col = "steelblue",
main = "Histogram",
xlab = "Manufacturers",
ylab = "Frequency"
)
hist (
us_cereal$protein,
col = "steelblue",
main = "Histogram",
xlab = "Manufacturers",
ylab = "Frequency"
)
hist (
us_cereal$protein,
col = "steelblue",
main = "Histogram",
xlab = "Manufacturers",
ylab = "Frequency"
)
hist (
us_cereal$protein,
col = "steelblue",
main = "Histogram",
xlab = "Protein",
ylab = "Frequency"
)
summary (us_cereal)
hist (
us_cereal$sodium,
col = "steelblue",
main = "Histogram",
xlab = "Protein",
ylab = "Frequency"
)
hist (
us_cereal$potassium,
col = "yellow",
main = "Histogram",
xlab = "Protein",
ylab = "Frequency"
)
manufactures <- as.numeric(us_cereal$mfr)
manufactures
manufactures <- na.omit(as.numeric(us_cereal$mfr))
manufactures
hist (
manufactures,
col = "green",
main = "Manufacturers",
xlab = "Manufacturers"
)
str (us_cereal)
us_cereal$mfr
?factor
mfr <- as.factor(us_cereal$mfr)
mfr
mfr <- as.integer(as.factor(us_cereal$mfr))
mfr
mfr <- us_cereal %>% group_by(mfr)
mfr
mfr$protein
mfr
head(mfr)
mfr <- as.integer(as.factor(us_cereal$mfr))
mfr
histogram (
mfr,
col = "red",
main = "Histogram",
xlab = "Manufacturers",
ylab = "Frequency"
)
hist (
mfr,
col = "red",
main = "Histogram",
xlab = "Manufacturers",
ylab = "Frequency"
)
hist (
mfr,
col = "black",
main = "Histogram",
xlab = "Manufacturers",
ylab = "Frequency"
)
str(us_cereal)
ggplot (
aes (
x = us_cereal$carbo
y = us_cereal$fibre
ggplot (
aes (
x = us_cereal$carbo,
y = us_cereal$fibre
)
)
ggplot (
aes (
us_cereal
x = us_cereal$carbo,
# Analyze the spread of dataset for the manufacturer to check how each one has
# given preference to fibre for each of the manufactures
?ggplot
str(us_cereal)
head(us_cereal$Name)
tail(us_cereal$Name)
tapplt
tapply
?tapply
max_protein_by_manufacturer <- tapply(us_cereal$protein, us_cereal$mfr, max)
max_protein_by_manufacturer
ggplot(
us_cereal,
aes(x = mfr, y = fibre)
) +
geom_boxplot() +
labs(title = "Spread of Fiber Values by Manufacturer",
x = "Manufacturer",
y = "Fiber") +
theme_minimal()
# create a plot to find the outlier on calories for each shelf
ggplot(data, aes(x = as.factor(shelf), y = calories)) +
geom_boxplot() +
labs(title = "Outliers in Calories for Each Shelf",
x = "Shelf",
y = "Calories") +
theme_minimal()
# create a plot to find the outlier on calories for each shelf
ggplot(
us_cereal,
aes(x = as.factor(shelf), y = calories)
) +
geom_boxplot() +
labs(title = "Outliers in Calories for Each Shelf",
x = "Shelf",
y = "Calories") +
theme_minimal()
?sapply
# create a plot to explore all the numeric variables
numeric_vars <- us_cereal[, sapply(us_cereal, is.numeric)]
# Create a pairs plot
pairs(numeric_vars)
library(GGally)
str(us_cereal)
# Create an enhanced pairs plot
ggpairs(us_cereal, columns = c("calories", "protein", "fat", "sodium", "fibre", "carbo", "sugers", "potassium"))
?ggpairs
ggpairs(us_cereal, columns = col)
ggpairs(us_cereal, columns = col = c("calories", "protein", "fat", "sodium", "fibre", "carbo", "sugers", "potassium"))
ggpairs(us_cereal, columns =  c("calories", "protein", "fat", "sodium", "fibre", "carbo", "sugers", "potassium"))
ggpairs(us_cereal, columns =  c("calories", "protein", "fat", "sodium", "fibre", "carbo", "sugars", "potassium"))
# Identify the top four mean variables and create the data frame 'GreaterMeanFour'
mean_values <- colMeans(us_cereal[sapply(us_cereal, is.numeric)])
# Identify the top four variables with the highest mean values
top_four_variables <- names(sort(mean_values, decreasing = TRUE)[1:4])
# Create the 'GreaterMeanFour' data frame with only the top four variables
GreaterMeanFour <- us_cereal[, top_four_variables]
GreaterMeanFour
# Identify the top four mean variables and create the data frame 'GreaterMeanFour'
?sapply
library(reshape2)
# Find the strength of the relationship of 'GreaterMeanFour' and plot the relationship
# Calculate correlation matrix
correlation_matrix <- cor(GreaterMeanFour)
# Melt the correlation matrix for plotting
melted_corr <- melt(correlation_matrix)
# Create the heatmap
ggplot(melted_corr, aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Correlation Heatmap of 'GreaterMeanFour'")
var1 = sodium
var1 = us_cereal$sodium
var2 = us_cereal$calories
regression_model <- lm(var1 ~ var2, data = GreaterMeanFour)
ggplot(GreaterMeanFour, aes(x = var1, y = var2)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Simple Linear Regression",
x = variable2,
y = variable1)
ggplot(GreaterMeanFour, aes(x = var1, y = var2)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Simple Linear Regression",
x = var1,
y = var2)
ggplot(GreaterMeanFour, aes(x = sodium, y = calories)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Simple Linear Regression",
x = sodium,
y = calories)
sodium = us_cereal$sodium
calories = us_cereal$calories
regression_model <- lm(sodium ~ calories, data = GreaterMeanFour)
ggplot(GreaterMeanFour, aes(x = sodium, y = calories)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Simple Linear Regression",
x = sodium,
y = calories)
# find the maximum protein value of each manufacturer.
mfr <- us_cereal %>% group_by(mfr)
mfr
ax_protein_by_manufacturer <- aggregate(protein ~ mfr, data = us_cereal, FUN = max)
print(max_protein_by_manufacturer)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
# analyze the spread of the data set for the manufacturer to check how each one has given preference to fibre
ggplot (
us_cereal,
aes (x = mfr, y = fibre)
) +
geom_boxplot() +
labs(title = "Spread of Fiber Values by Manufacturer",
x = "Manufacturer",
y = "Fiber") +
theme_minimal()
ax_protein_by_manufacturer <- aggregate(protein ~ mfr, data = us_cereal, FUN = max)
print(max_protein_by_manufacturer)
# Finding the maximum protein value of each manufacturer
max_protein_by_manufacturer <- tapply(us_cereal$protein, us_cereal$mfr, max)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
us_cereal <- read.csv("./UScereal1.csv")
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
print(missing_values)
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
print(missing_values)
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
print(missing_values)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
print(missing_values)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
View(us_cereal)
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
print(missing_values)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
print(us_cereal$protein)
us_cereal <- read.csv("./UScereal1.csv")
print(us_cereal$protein)
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
print(us_cereal$protein)
print(missing_values)
print(us_cereal$protein)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
print(missing_values)
us_cereal <- read.csv("./UScereal1.csv")
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
# Finding the maximum protein value of each manufacturer
max_protein_by_manufacturer <- tapply(us_cereal$protein, us_cereal$mfr, max)
print(missing_values)
us_cereal <- read.csv("./UScereal1.csv")
# Finding the maximum protein value of each manufacturer
max_protein_by_manufacturer <- tapply(us_cereal$protein, us_cereal$mfr, max)
print(missing_values)
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
print(missing_values)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
print(us_cereal$protein)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
print(us_cereal$protein)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
print(us_cereal$protein)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
us_cereal <- read.csv("./UScereal1.csv")
print(us_cereal$protein)
print(us_cereal$protein)
print(missing_values)
us_cereal <- read.csv("./UScereal1.csv")
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
us_cereal <- read.csv("./UScereal1.csv")
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
us_cereal <- read.csv("./UScereal1.csv")
print(missing_values)
us_cereal <- read.csv("./UScereal1.csv")
us_cereal <- read.csv("./UScereal1.csv")
print(missing_values)
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
us_cereal <- read.csv("./UScereal1.csv")
missing_values <- is.na(data)
us_cereal <- read.csv("./UScereal1.csv")
print(us_cereal$protein)
# print(us_cereal$protein)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
str(us_cereal)
summary (us_cereal)
# distribution of Protein
hist (
us_cereal$sodium,
col = "steelblue",
main = "Histogram",
xlab = "Protein",
ylab = "Frequency"
)
# Finding the maximum protein value of each manufacturer
max_protein_by_manufacturer <- tapply(us_cereal$protein, us_cereal$mfr, max)
max_protein_by_manufacturer
# analyze the spread of the data set for the manufacturer to check how each one has given preference to fibre
ggplot (
us_cereal,
aes (x = mfr, y = fibre)
) +
geom_boxplot() +
labs(title = "Spread of Fiber Values by Manufacturer",
x = "Manufacturer",
y = "Fiber") +
theme_minimal()
# create a plot to find the outlier on calories for each shelf
ggplot (
us_cereal,
aes (x = as.factor(shelf), y = calories)
) +
geom_boxplot() +
labs(title = "Outliers in Calories for Each Shelf",
x = "Shelf",
y = "Calories") +
theme_minimal()
# create a plot to explore all the numeric variables
numeric_vars <- us_cereal[, sapply(us_cereal, is.numeric)]
pairs(numeric_vars)
ggpairs(us_cereal, columns =  c("calories", "protein", "fat", "sodium", "fibre", "carbo", "sugars", "potassium"))
?ggpairs
given_value <- 10
# Make predictions before removing outliers
prediction_before <- predict(regression_model, newdata = data.frame(sodium = given_value))
predictions_before <- predict(model, newdata = data.frame(calories = 150))
sodium = us_cereal$sodium
calories = us_cereal$calories
regression_model <- lm(sodium ~ calories, data = GreaterMeanFour)
mean_values <- colMeans(us_cereal[sapply(us_cereal, is.numeric)])
top_four_variables <- names(sort(mean_values, decreasing = TRUE)[1:4])
GreaterMeanFour <- us_cereal[, top_four_variables]
GreaterMeanFour
mean_values <- colMeans(us_cereal[sapply(us_cereal, is.numeric)])
top_four_variables <- names(sort(mean_values, decreasing = TRUE)[1:4])
GreaterMeanFour <- us_cereal[, top_four_variables]
library(reshape2)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(GGally)
us_cereal <- read.csv("./UScereal1.csv")
# print(us_cereal$protein)
# Check for missing/NA values
missing_values <- sapply(us_cereal, function(x) sum(is.na(x)))
print(missing_values)
# Replacing the missing values.
us_cereal$protein <- ifelse(is.na(us_cereal$protein), mean(us_cereal$protein, na.rm = TRUE), us_cereal$protein)
print(us_cereal$protein)
View(us_cereal)
str(us_cereal)
dim(us_cereal)
summary (us_cereal)
# distribution of Protein
hist (
us_cereal$sodium,
col = "steelblue",
main = "Histogram",
xlab = "Protein",
ylab = "Frequency"
)
# Finding the maximum protein value of each manufacturer
max_protein_by_manufacturer <- tapply(us_cereal$protein, us_cereal$mfr, max)
max_protein_by_manufacturer
ax_protein_by_manufacturer <- aggregate(protein ~ mfr, data = us_cereal, FUN = max)
print(max_protein_by_manufacturer)
# analyze the spread of the data set for the manufacturer to check how each one has given preference to fibre
ggplot (
us_cereal,
aes (x = mfr, y = fibre)
) +
geom_boxplot() +
labs(title = "Spread of Fiber Values by Manufacturer",
x = "Manufacturer",
y = "Fiber") +
theme_minimal()
# create a plot to find the outlier on calories for each shelf
ggplot (
us_cereal,
aes (x = as.factor(shelf), y = calories)
) +
geom_boxplot() +
labs(title = "Outliers in Calories for Each Shelf",
x = "Shelf",
y = "Calories") +
theme_minimal()
# create a plot to explore all the numeric variables
numeric_vars <- us_cereal[, sapply(us_cereal, is.numeric)]
pairs(numeric_vars)
mean_values <- colMeans(us_cereal[sapply(us_cereal, is.numeric)])
top_four_variables <- names(sort(mean_values, decreasing = TRUE)[1:4])
GreaterMeanFour <- us_cereal[, top_four_variables]
GreaterMeanFour
us_cereal <- read.csv("./UScereal1.csv")
mean_values <- colMeans(us_cereal[sapply(us_cereal, is.numeric)])
top_four_variables <- names(sort(mean_values, decreasing = TRUE)[1:4])
GreaterMeanFour <- us_cereal[, top_four_variables]
GreaterMeanFour
# The strength of the relationship of 'GreaterMeanFour' relationship
correlation_matrix <- cor(GreaterMeanFour)
GreaterMeanFour <- us_cereal[, top_four_variables]
# Create the heatmap
ggplot(melted_corr, aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Correlation Heatmap of 'GreaterMeanFour'")
melted_corr <- melt(correlation_matrix)
# The strength of the relationship of 'GreaterMeanFour' relationship
correlation_matrix <- cor(GreaterMeanFour)
